{
  "_args": [
    [
      {
        "raw": "usemin@^0.4.3",
        "scope": null,
        "escapedName": "usemin",
        "name": "usemin",
        "rawSpec": "^0.4.3",
        "spec": ">=0.4.3 <0.5.0",
        "type": "range"
      },
      "/Users/gambit/out-of-system/node_modules/usemin-cli"
    ]
  ],
  "_from": "usemin@>=0.4.3 <0.5.0",
  "_id": "usemin@0.4.3",
  "_inCache": true,
  "_location": "/usemin",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/usemin-0.4.3.tgz_1488330984839_0.6062817838974297"
  },
  "_npmUser": {
    "name": "nelsyeung",
    "email": "nelsyeung@icloud.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "center-align": "0.1.3",
    "decamelize": "1.2.0",
    "right-align": "0.1.3",
    "uglify-to-browserify": "1.0.2",
    "wordwrap": "0.0.2"
  },
  "_requested": {
    "raw": "usemin@^0.4.3",
    "scope": null,
    "escapedName": "usemin",
    "name": "usemin",
    "rawSpec": "^0.4.3",
    "spec": ">=0.4.3 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/usemin-cli"
  ],
  "_resolved": "https://registry.npmjs.org/usemin/-/usemin-0.4.3.tgz",
  "_shasum": "45bc51492e4a833dc2cbdc9fc7c641603751bd12",
  "_shrinkwrap": null,
  "_spec": "usemin@^0.4.3",
  "_where": "/Users/gambit/out-of-system/node_modules/usemin-cli",
  "author": {
    "name": "Nelson Yeung",
    "url": "http://nelsyeung.com"
  },
  "bugs": {
    "url": "https://github.com/nelsyeung/usemin/issues"
  },
  "dependencies": {
    "clean-css": "^3.4.24",
    "html-minifier": "^3.2.3",
    "mkdirp": "^0.5.1",
    "uglify-js": "^2.7.5"
  },
  "description": "Replaces references to non-optimized scripts or stylesheets into a set of HTML files (or any templates/views).",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^3.14.0",
    "mocha": "^3.2.0",
    "rimraf": "^2.5.4"
  },
  "directories": {},
  "dist": {
    "shasum": "45bc51492e4a833dc2cbdc9fc7c641603751bd12",
    "tarball": "https://registry.npmjs.org/usemin/-/usemin-0.4.3.tgz"
  },
  "eslintConfig": {
    "env": {
      "node": true,
      "mocha": true
    },
    "extends": "eslint:recommended",
    "rules": {
      "indent": [
        "error",
        "tab"
      ],
      "linebreak-style": [
        "error",
        "unix"
      ],
      "quotes": [
        "error",
        "single"
      ],
      "semi": [
        "error",
        "always"
      ],
      "comma-dangle": [
        "error",
        "always"
      ],
      "brace-style": [
        "error",
        "1tbs"
      ]
    }
  },
  "gitHead": "cd62fa97e07805d916a224d9a4ace2521f4a7983",
  "homepage": "https://github.com/nelsyeung/usemin#readme",
  "keywords": [
    "usemin",
    "html",
    "css",
    "optimize"
  ],
  "license": "MIT",
  "main": "usemin.js",
  "maintainers": [
    {
      "name": "nelsyeung",
      "email": "nelsyeung@icloud.com"
    }
  ],
  "name": "usemin",
  "optionalDependencies": {},
  "readme": "# usemin [![Build Status](https://travis-ci.org/nelsyeung/usemin.svg?branch=master)](https://travis-ci.org/nelsyeung/usemin)\n\n> API version of usemin. For _purists_, those who doesn't use build tools like [Grunt](https://github.com/yeoman/grunt-usemin) and [Gulp](https://github.com/zont/gulp-usemin), but just use node as their build tool.\n\n## Getting started\n\nInstall with npm:\n```sh\nnpm install usemin\n```\n\n## CLI\n[usemin-cli](https://github.com/nelsyeung/usemin-cli) - Command line interface for this module.\n\n## API\n```js\nvar usemin = require('usemin');\n```\n\n### usemin(filepath, dest, [opts])\nReplaces references to non-optimized scripts or stylesheets into a set of HTML files (or any templates/views).\n\n#### Parameters:\n*(string)* **filepath** - HTML input file path.\n\n*(string)* **dest** - Directory for where the optimized scripts and stylesheets should go.\n\n*(object)* **opts** *Optional* - See below for the available options.\n\n#### Returns:\n*(string)* The content of the final HTML file\n\n#### options:\n```js\nvar defaults = {\n\toutput: false, // HTML output path. If false, it will be printed to the console (string)\n\tconfigFile: false, // config file path for UglifyJS, CleanCSS and HTML minifier (string)\n\thtmlmin: false, // Whether to minify the input HTML file (Boolean)\n\tnoprocess: false, // Do not process files, just replace references (Boolean)\n\tremoveLivereload: false, // Remove livereload script (Boolean)\n};\n```\n\n#### Examples\n```js\nvar html = usemin('src/index.html', 'dist');\nusemin('src/index.html', 'dist', {\n\toutput: 'dist/index.html',\n\thtmlmin: true,\n\tremoveLivereload: true,\n});\n```\n\n### usemin.getBlocks(filepath, content, removeLivereload)\nExtract information from a HTML input file to be processed later. This does not process any files\n(i.e., it doesn't perform uglify or minify).\n\n#### Parameters:\n*(string)* **filepath** - HTML input file path.\n\n*(string)* **content** - Content of the HTML file as a string. (The reason for this is because the\nmain usemin function uses this content multiple times, so to prevent the file being read multiples\ntimes it's simply cached into a variable to be passed into these API functions.)\n\n*(boolean)* **removeLivereload** - Whether to also extract livereload script.\n\n#### Returns:\n**(object)** An object of the following form:\n```js\n[\n\t{\n\t\tasync: false,\n\t\tdefer: false,\n\t\ttype: 'css',\n\t\tdest: 'css/main.css',\n\t\tindent: '\\t',\n\t\tsearchPath: ['',],\n\t\tsrc: [\n\t\t   inputsDir + 'css/foo.css',\n\t\t   inputsDir + 'css/bar.css',\n\t\t],\n\t\traw: [\n\t\t   '\\t<!-- build:css css/main.css -->',\n\t\t   '\\t<link rel=\"stylesheet\" href=\"css/foo.css\">',\n\t\t   '\\t<link rel=\"stylesheet\" href=\"css/bar.css\">',\n\t\t   '\\t<!-- endbuild -->',\n\t\t],\n\t},\n]\n```\n\n### usemin.getConfig(configFile)\nReturns configurations object for UglifyJS, CleanCSS and HTML minifier from a config file.\n\n#### Parameters:\n*(string)* **configFile** - Config file path. (.js extension can be omitted.)\n\n#### returns:\n**(object)** An object of the following form:\n```js\n{\n\tuglifyjs: {\n\t},\n\tcleancss: {\n\t},\n\thtmlminifier: {\n\t\tremoveComments: true,\n\t\tcollapseWhitespace: true,\n\t\tremoveEmptyAttributes: true,\n\t\tremoveScriptTypeAttributes: true,\n\t\tremoveStyleLinkTypeAttributes: true,\n\t\tminifyJS: true,\n\t\tminifyCSS: true,\n\t},\n}\n```\n\n### usemin.processBlocks(blocks, dest, config)\nUglify javascripts and CSS for a supplied block object from the `usemin.getBlocks` function.\n\n#### Parameters:\n*(object[])* **blocks** - Blocks from the `usemin.getBlocks` function.\n\n*(string)* **dest** - Directory for where the optimized scripts and stylesheets should go.\n\n*(object)* **config** - Configuration object for UglifyJS, cleanCSS and HTML minifier.\n\n#### Returns:\n*(boolean)* Throws error, otherwise true.\n\n### usemin.getHtml(content, blocks, htmlmin, config)\nReturns the HTML with replaced references to non-optimized scripts or stylesheets.\n\n#### Parameters:\n*(string)* **content** - Content of the HTML file as a string. (The reason for this is because the\nmain usemin function uses this content multiple times, so to prevent the file being read multiples\ntimes it's simply cached into a variable to be passed into these API functions.)\n\n*(object[])* **blocks** - Blocks from the `usemin.getBlocks` function.\n\n*(boolean)* **htmlmin** - Whether to also minify the HTML.\n\n*(object)* **config** - Configuration object for UglifyJS, cleanCSS and HTML minifier.\n\n#### Returns:\n*(string)* The content of the final HTML file\n\n### Example HTML\n#### Blocks\nBlocks are expressed as:\n```html\n<!-- build:<pipelineId>(alternate search path) <path> -->\n... HTML Markup, list of script / link tags.\n<!-- endbuild -->\n```\n\n- **pipelineId**: pipeline id for options or remove to remove a section\n- **alternate search path**: (optional) By default the input files are relative to the treated file. Alternate search path allows one to change that\n- **path**: the file path of the optimized file, the target output\n\n```html\n<!-- build:css css/main.js -->\n<link rel=\"stylesheet\" href=\"css/main.css\">\n<link rel=\"stylesheet\" href=\"css/modules.css\">\n<!-- endbuild -->\n\n<!-- build:js js/main.js -->\n<script src=\"js/app.js\"></script>\n<script src=\"js/controllers.js\"></script>\n<!-- endbuild -->\n\n<!-- build:js js/main.js -->\n<script defer async src=\"js/app.js\"></script>\n<script defer async src=\"js/controllers.js\"></script>\n<!-- endbuild -->\n\n<!-- build:remove -->\n<script src=\"js/app.js\"></script>\n<script src=\"js/controllers.js\"></script>\n<!-- endbuild -->\n\n<script>document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1\"></' + 'script>')</script>\n```\nRunning the command with `--rmlr true` will output:\n```\n<link rel=\"stylesheet\" href=\"css/main.js\">\n<script src=\"js/main.js\"></script>\n<script defer async src=\"js/main.js\"></script>\n```\n\n#### Alternate search path\n```html\n<!-- build:js(js) js/main.js -->\n<script defer async src=\"app.js\"></script>\n<script defer async src=\"controllers.js\"></script>\n<!-- endbuild -->\n\n<!-- build:js(js,.tmp) js/main.js -->\n<script defer async src=\"app.js\"></script>\n<script defer async src=\"controllers.js\"></script>\n<!-- endbuild -->\n```\n\n### Config file\n\nPlease check the relevant documentations for the available options: [UglifyJS](https://github.com/mishoo/UglifyJS2), [CleanCSS](https://github.com/jakubpawlowicz/clean-css) and [HTML minifier](https://github.com/kangax/html-minifier).\n\n```JavaScript\nmodule.exports = {\n\tuglifyjs: {\n\t\t// ... UglifyJS API options\n\t},\n\tcleancss: {\n\t\t// ... CleanCSS API options\n\t},\n\thtmlminifier: {\n\t\t// ... HTML minifier API options\n\t}\n}\n```\n\n## License\n\n[MIT license](http://opensource.org/licenses/MIT.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nelsyeung/usemin.git"
  },
  "scripts": {
    "test": "eslint . && mocha"
  },
  "version": "0.4.3"
}
